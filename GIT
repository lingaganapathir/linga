SCCS

Central repo server(src code is stored (may or maynot be cloud)) 
  >GIT 
  >bitbucket
  >svn
  >clearcase
  >tfvc(microsoft)
  
  
git(has central and local repository) > distributed
commit (storing in local repo)
push (storing in central repo)

branch>is a dynamic pointer to commit / separate copy of source code
branch is in repository

3 DIRECTORY(PHYSICAL AREAS)
workdir(all files in src excluding .git)
staging/index(.git)
repository(.git)

.git(system folder)

CMD
>git version(to get version of git)
>where git(to get git path)
>mkdir gitdemo1 (to create a new directory)
>cd gitdemo1(to get into the folder)
>git init(initialize empty git repository) a .git(local repository) folder will be created 
>notepad prog1.java(to create a prog1.java file in notepad)
>git status(shows what are stored in local repository)
>git add . (to track changes in all directory) prog1.java is copied to staging/index  . = all files
>git add prog1.java
>git commit -m "message"  (what ever in staging is copied to repository)
>git log(no. of changes done to repository and its details)
>git log --oneline (no of changes and its details in single line)
>git cd.. (back to previous folder)
>type prog1.java(displays the prog1 from workdir)
>git checkout prog1.java(takes copy from staging to workdir)
>git checkout HEAD -- prog1.java(copy of prog1 as in repository will be copied to staging and workdir )
>git diff (compare workdir with staging)
>git diff --cached (compare staging with repository)
>git branch (returns the branch name)
>git branch b2 (b2 branch is created)
>git checkout b2 (switches to b2 branch)
>git merge mybranch (merges mybranch with master)
>git log --all --graph --decorate --oneline
>git remote add (repo1-alias for central repo) (URL-central repo)
>git push repo1 master (pushes master branch into repo1)

GIT COMMANDS (https://dzone.com/articles/top-20-git-commands-with-examples)

git config : 
Usage: git config –global user.name “[name]”
This command sets the author name and email address respectively to be used with your commits.

git init :
usage:git init [repository name]
This command is used to start a new repository.

git clone :
Usage: git clone [url]  
This command is used to obtain a repository from an existing URL.

git add :
Usage: git add [file]  
This command adds a file to the staging area.
Usage: git add *  
This command adds one or more to the staging area.

git commit :
Usage: git commit -m “[ Type in the commit message]”  
This command records or snapshots the file permanently in the version history.

Usage: git commit -a  
This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.

git diff :
Usage: git diff  
This command shows the file differences which are not yet staged.

Usage: git diff –staged 
This command shows the differences between the files in the staging area and the latest version present.

Usage: git diff [first branch] [second branch]  
This command shows the differences between the two branches mentioned.

git reset :
Usage: git reset [file]  
This command unstages the file, but it preserves the file contents.

Usage: git reset [commit]  
This command undoes all the commits after the specified commit and preserves the changes locally.

Usage: git reset –hard [commit]  
This command discards all history and goes back to the specified commit.

git status :
Usage: git status  
This command lists all the files that have to be committed.

git rm :
Usage: git rm [file]  
This command deletes the file from your working directory and stages the deletion.

git log :
Usage: git log  
This command is used to list the version history for the current branch.

Usage: git log –follow[file]  
This command lists version history for a file, including the renaming of files also.


git show :
Usage: git show [commit]  
This command shows the metadata and content changes of the specified commit.

git tag :
Usage: git tag [commitID]  
This command is used to give tags to the specified commit.

git branch :
Usage: git branch  
This command lists all the local branches in the current repository.

Usage: git branch [branch name]  
This command creates a new branch.

Usage: git branch -d [branch name]  
This command deletes the feature branch.

git checkout :
Usage: git checkout [branch name]  
This command is used to switch from one branch to another.

Usage: git checkout -b [branch name]  
This command creates a new branch and also switches to it.

git merge :
Usage: git merge [branch name]  
This command merges the specified branch’s history into the current branch.

git remote :
Usage: git remote add [variable name] [Remote Server Link]  
This command is used to connect your local repository to the remote server.

git push :
Usage: git push [variable name] master  
This command sends the committed changes of master branch to your remote repository.

Usage: git push [variable name] [branch]  
This command sends the branch commits to your remote repository.

Usage: git push –all [variable name]  
This command pushes all branches to your remote repository.

Usage: git push [variable name] :[branch name]  
This command deletes a branch on your remote repository.

git pull :
Usage: git pull [Repository Link]  
This command fetches and merges changes on the remote server to your working directory.

git stash :
Usage: git stash save  
This command temporarily stores all the modified tracked files.

Usage: git stash pop  
This command restores the most recently stashed files.

Usage: git stash list  
This command lists all stashed changesets.

Usage: git stash drop  
This command discards the most recently stashed changeset.



